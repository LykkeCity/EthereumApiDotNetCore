// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace EthereumSamuraiApiCaller
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for EthereumSamuraiApi.
    /// </summary>
    public static partial class EthereumSamuraiApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address'>
            /// </param>
            public static object ApiBalanceGetBalanceByAddressGet(this IEthereumSamuraiApi operations, string address)
            {
                return operations.ApiBalanceGetBalanceByAddressGetAsync(address).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiBalanceGetBalanceByAddressGetAsync(this IEthereumSamuraiApi operations, string address, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBalanceGetBalanceByAddressGetWithHttpMessagesAsync(address, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address'>
            /// </param>
            /// <param name='startBlock'>
            /// </param>
            /// <param name='stopBlock'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='count'>
            /// </param>
            public static object ApiInternalMessagesByAddressGet(this IEthereumSamuraiApi operations, string address, long? startBlock = default(long?), long? stopBlock = default(long?), int? start = default(int?), int? count = default(int?))
            {
                return operations.ApiInternalMessagesByAddressGetAsync(address, startBlock, stopBlock, start, count).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address'>
            /// </param>
            /// <param name='startBlock'>
            /// </param>
            /// <param name='stopBlock'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiInternalMessagesByAddressGetAsync(this IEthereumSamuraiApi operations, string address, long? startBlock = default(long?), long? stopBlock = default(long?), int? start = default(int?), int? count = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiInternalMessagesByAddressGetWithHttpMessagesAsync(address, startBlock, stopBlock, start, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ApiSystemIsAliveGet(this IEthereumSamuraiApi operations)
            {
                operations.ApiSystemIsAliveGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiSystemIsAliveGetAsync(this IEthereumSamuraiApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiSystemIsAliveGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='count'>
            /// </param>
            public static object ApiTransactionByAddressGet(this IEthereumSamuraiApi operations, string address, int? start = default(int?), int? count = default(int?))
            {
                return operations.ApiTransactionByAddressGetAsync(address, start, count).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiTransactionByAddressGetAsync(this IEthereumSamuraiApi operations, string address, int? start = default(int?), int? count = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTransactionByAddressGetWithHttpMessagesAsync(address, start, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='blockNumber'>
            /// </param>
            public static object ApiTransactionBlockNumberByBlockNumberGet(this IEthereumSamuraiApi operations, long blockNumber)
            {
                return operations.ApiTransactionBlockNumberByBlockNumberGetAsync(blockNumber).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='blockNumber'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiTransactionBlockNumberByBlockNumberGetAsync(this IEthereumSamuraiApi operations, long blockNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTransactionBlockNumberByBlockNumberGetWithHttpMessagesAsync(blockNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='blockHash'>
            /// </param>
            public static object ApiTransactionBlockHashByBlockHashGet(this IEthereumSamuraiApi operations, string blockHash)
            {
                return operations.ApiTransactionBlockHashByBlockHashGetAsync(blockHash).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='blockHash'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiTransactionBlockHashByBlockHashGetAsync(this IEthereumSamuraiApi operations, string blockHash, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTransactionBlockHashByBlockHashGetWithHttpMessagesAsync(blockHash, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
